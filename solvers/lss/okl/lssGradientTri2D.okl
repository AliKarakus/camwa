// Compute volume terms for DGDG + DGFV elements 
@kernel void lssGradientVolumeTri2D(const dlong Nelements,
					     const dlong offset, 
					     @restrict const  dfloat *  vgeo,
					     @restrict const  dfloat *  DT,
					     @restrict const  dfloat *  q,
					     @restrict        dfloat *  gradq){

  for(dlong e=0;e<Nelements;++e;@outer(0)){

    @shared dfloat s_q[p_Np];
    // @exclusive int elmType; 

    for(int n=0;n<p_Np;++n;@inner(0)){
      // elmType = elmList[e]; 
      // if(elmType!=s_FVFV_TYPE){
	const dlong id = e*p_Np + n;
	s_q[n]          = q[id];
      // }
    }

    @barrier("local");

    for(int n=0;n<p_Np;++n;@inner(0)){

      // if(elmType!=s_FVFV_TYPE){
	// prefetch geometric factors (constant on triangle)
	const dfloat drdx = vgeo[e*p_Nvgeo + p_RXID];
	const dfloat drdy = vgeo[e*p_Nvgeo + p_RYID];
	const dfloat dsdx = vgeo[e*p_Nvgeo + p_SXID];
	const dfloat dsdy = vgeo[e*p_Nvgeo + p_SYID];

	dfloat dqdr = 0, dqds = 0; 

	for(int i=0;i<p_Np;++i){
	  const dfloat qn = s_q[i];
	  dqdr += DT[n+i*p_Np+0*p_Np*p_Np]*qn;
	  dqds += DT[n+i*p_Np+1*p_Np*p_Np]*qn;
	}

	const dfloat dqdx = drdx*dqdr + dsdx*dqds;
	const dfloat dqdy = drdy*dqdr + dsdy*dqds;

	const dlong id = e*p_Np + n;
	gradq[id + 0*offset] = -dqdx;
	gradq[id + 1*offset] = -dqdy;
      // }

    }
  }
}



// batch process elements
@kernel void lssGradientSurfaceTri2D(const dlong Nelements,
					      const dlong offset,
					      @restrict const  dfloat *  sgeo,
					      @restrict const  dfloat *  LIFTT,
					      @restrict const  dlong  *  vmapM,
					      @restrict const  dlong  *  vmapP,
					      @restrict const  int    *  EToB,
					      const  dfloat time,
					      @restrict const  dfloat *  x,
					      @restrict const  dfloat *  y,
					      @restrict const  dfloat *  z,                                 
					      @restrict const  dfloat *  q,
					      @restrict dfloat *  gradq){

  // for all elements
  for(dlong eo=0;eo<Nelements;eo+=p_NblockS;@outer(0)){

    // @shared storage for flux terms
    @shared dfloat s_pf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_pf2[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qf1[p_NblockS][p_NfacesNfp];
    @shared dfloat s_qf2[p_NblockS][p_NfacesNfp];

    // @exclusive int elmType; 
    // for all face nodes of all elements
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){ // maxNodes = max(Nfp*Nfaces,Np)
	const dlong e = eo + es;
	if(e<Nelements){
	  // elmType = elmList[e];
	  // if(n<p_NfacesNfp && elmType==s_DGDG_TYPE){
	    // find face that owns this node
	    const int face = n/p_Nfp;
	    // load surface geofactors for this face
	    const dlong sid   = p_Nsgeo*(e*p_Nfaces+face);
	    const dfloat nx   = sgeo[sid+p_NXID];
	    const dfloat ny   = sgeo[sid+p_NYID];
	    const dfloat sJ   = sgeo[sid+p_SJID];
	    const dfloat invJ = sgeo[sid+p_IJID];

	    // indices of negative and positive traces of face node
	    const dlong id  = e*p_Nfp*p_Nfaces + n;
	    const dlong idM = vmapM[id];
	    const dlong idP = vmapP[id];

	    // load traces
	    const dfloat qM = q[idM];  dfloat qP = q[idP];

	    // apply boundary condition
	    const int bc = EToB[face+p_Nfaces*e];
	    if(bc>0){
	      lssDirichletConditions2D(bc, time, x[idM], y[idM], nx, ny, qM, &qP);
	    }

	    const dfloat sc = invJ*sJ; 
	    // simple upwind
	    dfloat unx = 0.0, dnx = 1.0; 
	    dfloat uny = 0.0, dny = 1.0; 
	    if(nx>= 0){unx = 1.0, dnx = 0.0;}
	    if(ny>= 0){uny = 1.0, dny = 0.0;}
	    s_pf1[es][n]= sc*nx*( (dnx*qM  + unx*qP));
	    s_pf2[es][n]= sc*nx*( (unx*qM  + dnx*qP));
	    s_qf1[es][n]= sc*ny*( (dny*qM  + uny*qP));
	    s_qf2[es][n]= sc*ny*( (uny*qM  + dny*qP));
	  // }
	}
      }
    }

    // wait for all @shared memory writes of the previous inner loop to complete
    @barrier("local");

    // for each node in the element
    for(int es=0;es<p_NblockS;++es;@inner(1)){
      for(int n=0;n<p_maxNodes;++n;@inner(0)){
	const dlong e = eo + es;
	if(e<Nelements){
	  // if(n<p_Np && elmType==s_DGDG_TYPE){
	  if(n<p_Np){
	    const dlong id = e*p_Np+n;
	    dfloat p1 = 0.f, p2 = 0.f; 
	    dfloat q1 = 0.f, q2 = 0.f; 
	    // 
#pragma unroll p_NfacesNfp
	    for(int m=0;m<p_NfacesNfp;++m){
	      const dfloat L = LIFTT[n+m*p_Np];
	      p1 += L*s_pf1[es][m];
	      p2 += L*s_pf2[es][m];
	      q1 += L*s_qf1[es][m];
	      q2 += L*s_qf2[es][m];
	    }
	   
	    const dfloat dqdx = gradq[id + 0*offset];
	    const dfloat dqdy = gradq[id + 1*offset];

	    p1 +=  dqdx; p2 +=  dqdx; 
	    q1 +=  dqdy; q2 +=  dqdy;

	    const dfloat P = 0.5f*(p1+p2); 
	    const dfloat Q = 0.5f*(q1+q2); 

	    // LLF Numerical Hamiltonian for |grad q|
	     gradq[id] =(sqrt( P*P+Q*Q ) - 0.5f*(p1-p2)-0.5*(q1-q2));
	    // gradq[id] =  sqrt( P*P+Q*Q );
	  }
	}
      }
    }
  }
}
